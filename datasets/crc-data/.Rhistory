}, warning = function(war) {
print("in warning~")
}, error = function(err) {
print("in error!")
})
res <- tryCatch({
b <- matrix(1:9,3,3)
c <- b %*% c(1,2)
f <- b + 3
print("in running~")
}, warning = function(war) {
print("in warning~")
}, error = function(err) {
print("in error!")
})
f
res
for(i in 1:5) {
tryCatch({
if(i == 3 || i == 5) {
a <- matrix(rep(0,9),3,3) %*% c(1,2)
}
print("i")
print(i)
}, error = function(err) {
print("error i")
print(i)
})
}
help(stop)
for(i in 1:5) {
tryCatch({
if(i == 3 || i == 5) {
a <- matrix(rep(0,9),3,3) %*% c(1,2)
}
print("i")
print(i)
}, error = function(err) {
print("error i")
print(i)
stop("coordinate error!")
})
}
a <- c(1,2,3)
a
as.matrix(a, 1,3)
as.matrix(a, 1,3) %*%c(1,2,3)
a %*%c(1,2,3)
a
a %*%
a
a
a %*% t(a)
a %*% a
dim(a)
t(a)%*%a
a%*%t(a)
b <- as.matrix(a, 1,3)
b
b %*% a
a <- matrix(1:9,3,3)
a[1,]%*%c(1,2,3)
t(a[1,])%*%c(1,2,3)
a[1,]
as.matrix(a[1,])
help(source)
a
a <- list()
a[[1]] <- c(1:3)
a[[2]] <- c(12)
a[[3]] <- 345
a
a[-2]
help(proc.time)
a <- c(NaN, 1, 3, Inf)
a
a - rep(1,4)
sum(a)
a[0] <- 1
sum(a)
sum(is.na(a))
sum(is.infinite(a))
scale_dir <- function(x) {return(x / sqrt(sum(x*x)))}
scale_dir(c(runif(3)))
scale_dir(c(runif(3)))
scale_dir(c(runif(3)))
# compute the log probability for every point
getLogProbPer <- function(x, m, z, init, piProb) {
B <- init[[1]]
B0 <- init[[3]]
Theta <- init[[2]]
muM <- init[[4]]
covM <- init[[5]]
alpha <- exp(t(B)%*%m + z)
part1 <- sum(lgamma(alpha + x) - lgamma(alpha)) + (lgamma(sum(alpha)) - lgamma(sum(alpha + x)))
part2 <- 0.5*(computeLogDet(Theta) - computeLogDet(covM))
part3 <- log(piProb)
part4 <- - 0.5*(t(z - B0)%*%Theta%*%(z - B0) + t(m - muM)%*%solve(covM)%*%(m - muM))
return(part1 + part2 + part3 + part4)
}
x <- sample(c(0:1000), size = 500)
library(huge)
hg_res <- huge.generator(n = 5000, d = p, graph = "random")
p <- 500
q <- 7
x <- sample(c(0:(p*2)), size = p)
m <- runif(q)
z <- log(x + 1)
piProb <- 0.5
init <- list()
init[[1]] <- matrix(runif(q*p), q, p)
hg_res <- huge.generator(n = 5000, d = p, graph = "random")
init[[2]] <- hg_res$omega
View(init[[2]])
hg_meta <- huge.generator(n = 5000, d = 1, graph = "random")
init[[5]] <- hg_meta$sigma
res <- getLogProbPer(x, m, z, init, piProb)
# compute the det via cholesky decomposition
computeLogDet <- function(X){
eigen_value <- eigen(X, symmetric=TRUE, only.values=TRUE)$values
return(sum(log(eigen_value)))
}
res <- getLogProbPer(x, m, z, init, piProb)
runif(10)
p <- 500
q <- 7
x <- sample(c(0:(p*2)), size = p)
m <- runif(q)
z <- log(x + 1)
piProb <- 0.5
init <- list()
init[[1]] <- matrix(runif(q*p), q, p)
hg_res <- huge.generator(n = 5000, d = p, graph = "random")
init[[2]] <- hg_res$omega
init[[3]] <- runif(p) * 10
init[[4]] <- runif(q) * 10
hg_meta <- huge.generator(n = 5000, d = q, graph = "random")
init[[5]] <- hg_meta$sigma
res <- getLogProbPer(x, m, z, init, piProb)
library(microbenchmark)
microbenchmark(
res <- getLogProbPer(x, m, z, init, piProb)
}
microbenchmark(
res <- getLogProbPer(x, m, z, init, piProb)
)
M <- hg_res$data
X <- hg_res$data
p <- 500
q <- 7
piProb <- 0.5
init <- list()
init[[1]] <- matrix(runif(q*p), q, p)
hg_res <- huge.generator(n = 5000, d = p, graph = "random")
X <- hg_res$data
Z <- log(X + 1)
init[[2]] <- hg_res$omega
init[[3]] <- runif(p) * 10
init[[4]] <- runif(q) * 10
hg_meta <- huge.generator(n = 5000, d = q, graph = "random")
M <- hg_res$data
init[[5]] <- hg_meta$sigma
library(microbenchmark)
microbenchmark(
for(i in 1:5) {
res <- getLogProbPer(X[i,], M[i,], Z[i,], init, piProb)
}
)
Z <- log(exp(X) + 1)
microbenchmark(
for(i in 1:5) {
res <- getLogProbPer(X[i,], M[i,], Z[i,], init, piProb)
}
)
M <- hg_meta$data
microbenchmark(
for(i in 1:5) {
res <- getLogProbPer(X[i,], M[i,], Z[i,], init, piProb)
}
)
Z <- rbind(Z, Z)
dim(Z)
microbenchmark(
j <- 1
for(i in 1:5) {
res <- getLogProbPer(X[i,], M[i,], Z[(j-1)*n + i,], init, piProb)
}
)
j <- 1
microbenchmark(
for(i in 1:5) {
res <- getLogProbPer(X[i,], M[i,], Z[(j-1)*n + i,], init, piProb)
}
)
microbenchmark(
for(i in 1:5) {
res <- getLogProbPer(X[i,], M[i,], Z[(j-1)*n + i,], init, piProb)
}
)
n <- 5000
microbenchmark(
for(i in 1:5) {
res <- getLogProbPer(X[i,], M[i,], Z[(j-1)*n + i,], init, piProb)
}
)
j <- 2
microbenchmark(
for(i in 1:5) {
res <- getLogProbPer(X[i,], M[i,], Z[(j-1)*n + i,], init, piProb)
}
)
microbenchmark(
for(i in 1:50) {
res <- getLogProbPer(X[i,], M[i,], Z[(j-1)*n + i,], init, piProb)
}
)
p <- 500
q <- 7
n <- 5
piProb <- 0.5
init <- list()
init[[1]] <- matrix(runif(q*p), q, p)
hg_res <- huge.generator(n = n, d = p, graph = "random")
X <- hg_res$data
Z <- log(exp(X) + 1)
Z <- rbind(Z, Z)
init[[2]] <- hg_res$omega
init[[3]] <- runif(p) * 10
init[[4]] <- runif(q) * 10
hg_meta <- huge.generator(n = n, d = q, graph = "random")
M <- hg_meta$data
init[[5]] <- hg_meta$sigma
j <- 2
library(pryr)
address(X)
ref(X)
refs(X)
for(i in 1:5) {
res <- getLogProbPer(X[i,], M[i,], Z[(j-1)*n + i,], init, piProb)
print(c(address(X), refs(X)))
}
library(Rcpp)
getwd()
library(Rcpp)
library(RcppEigen)
sourceCpp("getLogPiProbC.cpp")
sourceCpp("getLogPiProbC.cpp")
sourceCpp("getLogPiProbC.cpp")
sourceCpp("getLogPiProbC.cpp")
library(huge)
# compute the det via cholesky decomposition
computeLogDet <- function(X){
eigen_value <- eigen(X, symmetric=TRUE, only.values=TRUE)$values
return(sum(log(eigen_value)))
}
# compute the log probability for every point
getLogProbPer <- function(x, m, z, init, piProb) {
B <- init[[1]]
B0 <- init[[3]]
Theta <- init[[2]]
muM <- init[[4]]
covM <- init[[5]]
alpha <- exp(t(B)%*%m + z)
part1 <- sum(lgamma(alpha + x) - lgamma(alpha)) + (lgamma(sum(alpha)) - lgamma(sum(alpha + x)))
part2 <- 0.5*(computeLogDet(Theta) - computeLogDet(covM))
part3 <- log(piProb)
part4 <- - 0.5*(t(z - B0)%*%Theta%*%(z - B0) + t(m - muM)%*%solve(covM)%*%(m - muM))
return(part1 + part2 + part3 + part4)
}
p <- 5
q <- 3
n <- 10
K <- 2
piProb <- c(0.4, 0.6)
initAll <- list()
init1 <- list()
init1[[1]] <- matrix(runif(q*p), q, p)
hg_res <- huge.generator(n = n, d = p, graph = "random")
X <- hg_res$data
Z <- log(exp(X) + 1)
Z <- rbind(Z, Z)
init1[[2]] <- hg_res$omega
init1[[3]] <- runif(p) * 10
init1[[4]] <- runif(q) * 10
hg_meta <- huge.generator(n = n, d = q, graph = "random")
M <- hg_meta$data
init1[[5]] <- hg_meta$sigma
initAll <- list(init1, init1)
PiProb <- matrix(0, n, K)
for(j in 1:K) {
for(i in 1:n) {
PiProb[i,j] <- getLogProbPer(X[i,], M[i,], Z[(j-1)*n + i,], init[[j]], piProb[j])
}
}
initAll <- list(init1, init1)
PiProb <- matrix(0, n, K)
for(j in 1:K) {
for(i in 1:n) {
PiProb[i,j] <- getLogProbPer(X[i,], M[i,], Z[(j-1)*n + i,], initAll[[j]], piProb[j])
}
}
library(Rcpp)
library(RcppEigen)
source("getLogPiProbC.cpp")
library(Rcpp)
library(RcppEigen)
sourceCpp("getLogPiProbC.cpp")
PiProbc <- getLogPiProbC(X = X, M = M, Z = Z,K = K, Pi = piProb, parameters = initAll)
View(PiProbc)
sourceCpp("getLogPiProbC.cpp")
PiProbc <- getLogPiProbC(X = X, M = M, Z = Z,K = K, Pi = piProb, parameters = initAll)
View(PiProb)
View(PiProbc)
sourceCpp("getLogPiProbC.cpp")
PiProbc <- getLogPiProbC(X = X, M = M, Z = Z,K = K, Pi = piProb, parameters = initAll)
init1[[5]]
sourceCpp("getLogPiProbC.cpp")
# compute the log probability for every point
getLogProbPer <- function(x, m, z, init, piProb) {
B <- init[[1]]
B0 <- init[[3]]
Theta <- init[[2]]
muM <- init[[4]]
covM <- init[[5]]
alpha <- exp(t(B)%*%m + z)
part1 <- sum(lgamma(alpha + x) - lgamma(alpha)) + (lgamma(sum(alpha)) - lgamma(sum(alpha + x)))
part2 <- 0.5*(computeLogDet(Theta) - computeLogDet(covM))
part3 <- log(piProb)
part4 <- - 0.5*(t(z - B0)%*%Theta%*%(z - B0) + t(m - muM)%*%solve(covM)%*%(m - muM))
print(paste("part1: ", as.character(part1), sep=" "))
print(paste("part2: ", as.character(part2), sep=" "))
print(paste("part3: ", as.character(part3), sep=" "))
print(paste("part4: ", as.character(part4), sep=" "))
return(part1 + part2 + part3 + part4)
}
PiProb <- matrix(0, n, K)
for(j in 1:K) {
for(i in 1:n) {
PiProb[i,j] <- getLogProbPer(X[i,], M[i,], Z[(j-1)*n + i,], initAll[[j]], piProb[j])
}
}
PiProbc <- getLogPiProbC(X = X, M = M, Z = Z,K = K, Pi = piProb, parameters = initAll)
library(huge)
# compute the det via cholesky decomposition
computeLogDet <- function(X){
eigen_value <- eigen(X, symmetric=TRUE, only.values=TRUE)$values
return(sum(log(eigen_value)))
}
# compute the log probability for every point
getLogProbPer <- function(x, m, z, init, piProb) {
B <- init[[1]]
B0 <- init[[3]]
Theta <- init[[2]]
muM <- init[[4]]
covM <- init[[5]]
alpha <- exp(t(B)%*%m + z)
part1 <- sum(lgamma(alpha + x) - lgamma(alpha)) + (lgamma(sum(alpha)) - lgamma(sum(alpha + x)))
part2 <- 0.5*(computeLogDet(Theta) - computeLogDet(covM))
part3 <- log(piProb)
part4 <- - 0.5*(t(z - B0)%*%Theta%*%(z - B0) + t(m - muM)%*%solve(covM)%*%(m - muM))
print(paste("part1: ", as.character(part1), sep=" "))
print(paste("part2: ", as.character(part2), sep=" "))
print(paste("part3: ", as.character(part3), sep=" "))
print(paste("part4: ", as.character(part4), sep=" "))
return(part1 + part2 + part3 + part4)
}
p <- 2
q <- 1
n <- 4
K <- 2
piProb <- c(0.4, 0.6)
initAll <- list()
init1 <- list()
init1[[1]] <- matrix(runif(q*p), q, p)
hg_res <- huge.generator(n = n, d = p, graph = "random")
X <- hg_res$data
Z <- log(exp(X) + 1)
Z <- rbind(Z, Z)
init1[[2]] <- hg_res$omega
init1[[3]] <- runif(p) * 10
init1[[4]] <- runif(q) * 10
hg_meta <- huge.generator(n = n, d = q, graph = "random")
M <- hg_meta$data
init1[[5]] <- hg_meta$sigma
initAll <- list(init1, init1)
PiProb <- matrix(0, n, K)
for(j in 1:K) {
for(i in 1:n) {
PiProb[i,j] <- getLogProbPer(X[i,], M[i,], Z[(j-1)*n + i,], initAll[[j]], piProb[j])
}
}
library(Rcpp)
library(RcppEigen)
sourceCpp("getLogPiProbC.cpp")
PiProbc <- getLogPiProbC(X = X, M = M, Z = Z,K = K, Pi = piProb, parameters = initAll)
View(PiProbc)
View(PiProb)
PiProb <- matrix(0, n, K)
for(j in 1:K) {
for(i in 1:n) {
PiProb[i,j] <- getLogProbPer(X[i,], M[i,], Z[(j-1)*n + i,], initAll[[j]], piProb[j])
}
}
sourceCpp("getLogPiProbC.cpp")
PiProbc <- getLogPiProbC(X = X, M = M, Z = Z,K = K, Pi = piProb, parameters = initAll)
init1
sourceCpp("getLogPiProbC.cpp")
PiProbc <- getLogPiProbC(X = X, M = M, Z = Z,K = K, Pi = piProb, parameters = initAll)
PiProb <- matrix(0, n, K)
for(j in 1:K) {
for(i in 1:n) {
PiProb[i,j] <- getLogProbPer(X[i,], M[i,], Z[(j-1)*n + i,], initAll[[j]], piProb[j])
}
}
View(PiProb)
View(PiProbc)
PiProb
PiProbc
a <- matrix(c(1,2,2,5,3,6,5,7), 4,2);
a
b <- matrix(c(1,2,3,4), 4,1);
cov(a)
cor(a)
cor(a, method = "spearman")
cor(a, b)
cor(a, b, method = "spearman")
a <- matrix(c(1.0, 1, 1.2, 1.05, 1.06, 1.09), 3,2)
a
a
a
help(scale)
scale(a)
cor(a)
a <- c(0.5 , 10 , 0 , -1)
lgamma(a)
diag(5)
install.packages("~/Downloads/mLDM.tar.gz", repos = NULL, type = "source")
load("~/code/mLDM-time/ag_otu_meta_547_7_5305.RData")
dim(x_final)
dim(m_final)
setwd("/home/yyq/code/kmldm/src/test")
setwd("/home/yyq/code/kmldm/src/test")
（）
getwd()
setwd("/home/yyq/code/kmldm/src/test")
getwd()
setwd("/Users/yyq10/code/mLDM-time/c++/kmldm/src/test/")
load("~/code/mLDM-time/result-547-7-5305-2-1-AGP.RData")
setwd("/Users/yyq10/code/mLDM-time/c++/kmldm/src/test/")
load("~/code/mLDM-time/ag_otu_meta_547_7_5305.RData")
dim(x_final)
dim(m_final)
write.table(x = x_final, file = "./agp_otu_table", row.names = FALSE, col.names = FALSE)
write.table(x = m_final, file = "./agp_meta_table", row.names = FALSE, col.names = FALSE)
write.table(x = c(5305, 547, 7), file = "./agp_matrix_shape", row.names = FALSE, col.names = FALSE)
load("~/code/mLDM-time/mLDM/CRC/Baxter_CRC.RData")
write.table(x = X, file = "./crc_otu_table", row.names = FALSE, col.names = FALSE)
write.table(x = M, file = "./crc_meta_table", row.names = FALSE, col.names = FALSE)
View(M)
write.table(x = c(490, 117, 13), sep = "\n", file = "./crc_matrix_shape", row.names = FALSE, col.names = FALSE)
View(M)
M_scale = scale(M, center = TRUE, scale = TRUE)
View(M_scale)
det(M_scale)
cov_M = cov(M_scale)
det(cov_M)
getwd()
load("~/code/mLDM-time/mLDM/CRC/Baxter_CRC.RData")
View(M)
write.table(x = M[,5:], file = "./crc_meta_table", row.names = FALSE, col.names = FALSE)
M[,5:6]
write.table(x = M[,5:13], file = "./crc_meta_table", row.names = FALSE, col.names = FALSE)
setwd("/Users/yyq10/code/mLDM-time/c++/kmldm/crc_data/")
meta_data <- read.csv(file = "./metadata.csv")
View(meta_data)
need_meta <- meta_data[,c(1,3,6,7)]
View(need_meta)
need_meta[1,2]
need_meta[1,2] == "High Risk Normal"
need_meta[1,2] == "High Risk"
table(need_meta[,2])
help(which)
need_meta[1,2]
need_state <- c("Adenoma","adv Adenoma","Cancer", "High Risk Normal","Normal")
need_gender <- c("m","f")
which(need_meta[1,2] == need_state)
need_meta[1,2]
need_state <- c("Normal", "High Risk Normal","adv Adenoma", "Adenoma","Cancer")
which(need_meta[1,2] == need_state)
for (i in 1:490) {
si <- which(need_meta[i, 2] == need_state)
need_meta[i,2] <- si
gi <- which(need_meta[i,4] == need_gender)
need_meta[i,4] <- gi
}
View(need_meta)
M_final <- matrix(0, 490, 4)
M_final <- matrix(0, 490, 4)
need_meta <- meta_data[,c(1,3,6,7)]
need_state <- c("Normal", "High Risk Normal","adv Adenoma", "Adenoma","Cancer")
need_gender <- c("m","f")
M_final <- matrix(0, 490, 4)
for (i in 1:490) {
M_final[i,1] <- need_meta[i,1]
si <- which(need_meta[i, 2] == need_state)
M_final[i,2] <- si
gi <- which(need_meta[i,4] == need_gender)
M_final[i,4] <- gi
M_final[i,3] <- need_meta[i,3]
}
View(M_final)
write.table(x = M_final, file = "crc_meta_table", sep=" ", col.names = FALSE, row.names = FALSE)
